package com.example.kafka.config;

import org.apache.kafka.common.errors.TopicAuthorizationException;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.listener.CommonErrorHandler;
import org.springframework.kafka.listener.DefaultErrorHandler;
import org.springframework.kafka.listener.ConsumerRecordRecoverer;
import org.springframework.kafka.listener.DeadLetterPublishingRecoverer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.core.KafkaTemplate;
import org.apache.kafka.common.TopicPartition;

import java.util.function.BiFunction;

@Configuration
public class KafkaContainerErrorHandlerConfig {

    private static final Logger log = LoggerFactory.getLogger(KafkaContainerErrorHandlerConfig.class);

    @Bean
    public CommonErrorHandler commonErrorHandler() {
        return new DefaultErrorHandler((consumerRecord, exception) -> {
            Throwable cause = exception;
            while (cause != null) {
                if (cause instanceof TopicAuthorizationException) {
                    log.error("FATAL: TopicAuthorizationException occurred: {}", cause.getMessage());
                    // Optional: Shutdown the app or alert
                    // System.exit(1);
                    break;
                }
                cause = cause.getCause();
            }
        });
    }

    @Autowired
    public void configureFactory(ConcurrentKafkaListenerContainerFactory<?, ?> factory,
                                 CommonErrorHandler errorHandler) {
        factory.setCommonErrorHandler(errorHandler);
    }
}
