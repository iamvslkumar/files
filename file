package com.example.kafka.config;

import org.apache.kafka.common.errors.TopicAuthorizationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;
import org.springframework.kafka.listener.ContainerProperties;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;

@Configuration
public class KafkaContainerErrorHandlerConfig {

    private static final Logger log = LoggerFactory.getLogger(KafkaContainerErrorHandlerConfig.class);

    @Autowired
    private ConcurrentKafkaListenerContainerFactory<?, ?> factory;

    @PostConstruct
    public void customizeContainer() {
        factory.setContainerCustomizer(container -> {
            container.setErrorHandler((thrownException, data) -> {
                Throwable cause = thrownException;
                while (cause != null) {
                    if (cause instanceof TopicAuthorizationException) {
                        log.error("FATAL: TopicAuthorizationException while consuming: {}", cause.getMessage());
                        // Optional: System.exit(1);
                        break;
                    }
                    cause = cause.getCause();
                }
            });
        });
    }
}
