package com.example.kafka.config;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.errors.TopicAuthorizationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.listener.CommonErrorHandler;
import org.springframework.kafka.listener.DefaultErrorHandler;

@Configuration
public class KafkaErrorHandlerConfig {

    private static final Logger log = LoggerFactory.getLogger(KafkaErrorHandlerConfig.class);

    /**
     * Define a CommonErrorHandler that handles fatal errors like TopicAuthorizationException.
     */
    @Bean
    public CommonErrorHandler commonErrorHandler() {
        return new DefaultErrorHandler((ConsumerRecord<?, ?> record, Exception exception) -> {
            Throwable cause = exception;
            while (cause != null) {
                if (cause instanceof TopicAuthorizationException) {
                    log.error("FATAL: TopicAuthorizationException occurred while consuming from topic: {}", cause.getMessage());
                    // Optional: Shut down the app, trigger alert, etc.
                    // System.exit(1);
                    break;
                }
                cause = cause.getCause();
            }
        });
    }

    /**
     * Configure the default Kafka listener container factory with the custom error handler.
     */
    @Bean
    public ConcurrentKafkaListenerContainerFactory<Object, Object> kafkaListenerContainerFactory(
            ConsumerFactory<Object, Object> consumerFactory,
            CommonErrorHandler errorHandler) {

        ConcurrentKafkaListenerContainerFactory<Object, Object> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory);
        factory.setCommonErrorHandler(errorHandler);
        return factory;
    }
}
